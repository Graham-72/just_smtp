<?php

/**
* @file
* Detects if PHPmailer has been installed.
*/

/**
 * Implements hook_uninstall().
 */
function just_smtp_uninstall() {
  // Remove variables.
  variable_del('just_smtp_on');
  variable_del('just_smtp_host');
  variable_del('just_smtp_port');
  variable_del('just_smtp_protocol');
  variable_del('just_smtp_username');
  variable_del('just_smtp_password');
  variable_del('just_smtp_encrypt');
  variable_del('just_smtp_test_address');
  variable_del('just_smtp_prior_mailsystem');
}

/**
 * Implements hook_disable().
 */
function just_smtp_disable() {
  // Restore prior mailsystem.
  $current_mailsystem = variable_get('mail_system', array('default-system' => 'DefaultMailSystem'));
  if ($current_mailsystem['default-system'] == 'JustSmtpMailSystem') {
    $prior_mailsystem = variable_get('just_smtp_prior_mailsystem', 'DefaultMailSystem');

    // Clone current mail system and replace 'default-system'.
    $new_mailsystem = $current_mailsystem;
    $new_mailsystem['default-system'] = $prior_mailsystem;
    variable_set('mail_system', $new_mailsystem);
  }

  variable_set('just_smtp_on', '0');
}

/**
 * Implements hook_requirements().
 */
function just_smtp_requirements ($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();

  // Check if PHPMailer has been installed. Unfortunately we cannot
  // detect that during install time with just using the libraries
  // module it seems.
  if ($phase == 'runtime') {
    $library = libraries_detect('PHPMailer');
    if ($library['installed']) {
      $requirements['PHPMailer'] = array(
        'title' => $t('PHPMailer'),
        'severity' => REQUIREMENT_OK,
        'value' => $library['version'],
      );
    }
    else {
      $requirements['PHPMailer'] = array(
        'title' => $t('PHPMailer'),
        'description' => $t('PHPmailer has not been installed. Please <a href="@url">download</a> and install it under sites/all/libraries.', array('@url' => 'https://github.com/PHPMailer/PHPMailer')),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }

  return $requirements;
}
